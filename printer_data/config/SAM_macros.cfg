#####################################################################
#   Mainsail.cfg Usage
#####################################################################

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 135.0 ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 357.0 ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 5.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 10.0  ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 120.0 ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 120.0 ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 86400 ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : "filament_switch_sensor O2_sensor"    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


#####################################################################
#   Input Shaper Calibration MACRO Buttons
#####################################################################

[gcode_macro Auto_Shaper_Calibrate]
description: Runs the auto shaper test for input shaping
gcode: 
   CG28
    
    _Z_PARK                    # Goes to center of the bed 
    SHAPER_CALIBRATE


##################################################################

   
[gcode_macro Resonance_Test_X]
description: Runs the input shaper resonance test for the X axis
gcode:
    CG28
    
    M117 Testing X axis please wait...
    TEST_RESONANCES AXIS=X
    M117
    
    M118 To build graph paste this message into your SSH terminal ............................................ ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_x_*.csv -o /tmp/shaper_calibrate_x.png


##################################################################


[gcode_macro Resonance_Test_Y]
description: Runs the input shaper resonance test for the Y axis
gcode:
    CG28
    
    M117 Testing Y axis please wait...
    TEST_RESONANCES AXIS=Y
    M117
    
    M118 To build graph paste this message into your SSH terminal ............................................ ~/klipper/scripts/calibrate_shaper.py /tmp/resonances_y_*.csv -o /tmp/shaper_calibrate_y.png


#####################################################################
#   Move Z motors without Homing  Z_ASCENDER
#####################################################################

[gcode_macro Z_ASCENDER]
description: Raise the toolhead by the selected distance if the printer is homed or not! 100mm max per activation USE WITH CAUTION!
gcode:
  {% set start_vars = printer["gcode_macro _START_VARIABLES"] %}
  {% set height = params.HEIGHT|default(15)|int %}
          
  {% if 'z' not in printer.toolhead.homed_axes %}
     RESPOND TYPE=COMMAND MSG="WARNING AXES RESET FOR Z LIFT!!"
     RESPOND TYPE=COMMAND MSG="EXTREME CAUTION! As the printer is NOT homed already Z0 will be the current toolhead position for the duration of this move! If commanded the Z axis will be able to pass Z maximum resulting in printer damage!!"
     SET_KINEMATIC_POSITION Z=0
     M400
     G90
    {% if height in range (0, 101) %}
      G0 Z{height} F800
      M400
      RESPOND TYPE=COMMAND MSG="Move complete, now disabling axes"
      M84
    {% else %}
      {action_raise_error("Request denied, operation cancalled! Lift height not in range. The maximum single commanded movement range is 0-100mm")}
    {% endif %}
    
  {% else %}
    G90
    {% if height in range (0, 101) %}
      G91
      G0 Z{height} F800
      M400
      G90
      RESPOND TYPE=COMMAND MSG="Move complete!"
    {% else %}
      {action_raise_error("Request denied, operation cancalled! Lift height not in range. The maximum single commanded movement range is 0-100mm")}
    {% endif %}
  {% endif %}


#####################################################################
#   Adjust White LED button on BTT HBB board   DAYLIGHT_TOGGLE
#####################################################################

[gcode_macro DAYLIGHT_TOGGLE]
description: Toggle Daylight
gcode:
  {% if printer['output_pin Daylight'].value == 0 %} DAYLIGHT_ON {% else %} DAYLIGHT_OFF {% endif %}

#####################################################################

[gcode_macro DAYLIGHT_ON]
description: Toggle Daylight
gcode:
 SET_PIN PIN=Daylight VALUE=1.00              # Sets Daylight to MAX
 SET_LED LED=HBB_LED RED=1 GREEN=1 BLUE=0 INDEX=7 

#####################################################################

[gcode_macro DAYLIGHT_OFF]
description: Toggle Daylight
gcode:
 SET_PIN PIN=Daylight VALUE=0.00              # Sets Daylight to ZERO
 SET_LED LED=HBB_LED RED=1 GREEN=1 BLUE=1 INDEX=7 


#####################################################################
#   Screen Beep Sound 
#####################################################################

# [gcode_macro M300]
# gcode:
# 	{% set S = params.S|default(1000)|int %}
# 	{% set P = params.P|default(100)|int %}

# 		SET_PIN PIN=beeper VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
# 		G4 P{P}
# 		SET_PIN PIN=beeper VALUE=0

# [gcode_macro BEEP]
# gcode:
#     # Parameters
#     {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
#     {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
#     {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

#     {% for iteration in range(i|int) %}
#         SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
#         G4 P{dur}
#         SET_PIN PIN=beeper VALUE=0
#         G4 P{dur}
#     {% endfor %}


#####################################################################
#   Initial LCD RGB 
#####################################################################

# [gcode_macro INITIAL_RGB]
# gcode:
#         SET_LED LED=lcd RED=0 GREEN=0 BLUE=1 INDEX=1 TRANSMIT=0
#         SET_LED LED=lcd RED=0 GREEN=0 BLUE=1 INDEX=2 TRANSMIT=0
#         SET_LED LED=lcd RED=0 GREEN=0 BLUE=1 INDEX=3 


#####################################################################
#   LCD RGB 
#####################################################################

# [gcode_macro LCDRGB]
# gcode:
#     {% set r = params.R|default(0)|float %}
#     {% set g = params.G|default(0)|float %}
#     {% set b = params.B|default(0)|float %}

#     SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
#     SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
#     SET_LED LED=lcd RED={r} GREEN={g} BLUE={b} INDEX=3


#####################################################################
#   KLICKY Auto-Z Calibration Macro
#####################################################################

#[gcode_macro CALIBRATE_Z]
# rename_existing: BASE_CALIBRATE_Z
# gcode:
#    {% set bed_position = params.BED_POSITION|default('None') %}
#    CG28                         # can also be a conditional homing macro
#    M117 Z-Calibration..
#    ATTACH_PROBE                # a macro for fetching the probe first
#    {% if bed_position != 'None' %}
#      BASE_CALIBRATE_Z BED_POSITION={bed_position}
#    {% else %}
#      BASE_CALIBRATE_Z
#    {% endif %}
#    DOCK_PROBE                # and parking it afterwards (or DETACH_PROBE in EUCLID macros)
#    M117
   
#####################################################################
#   Position the tool head on the purge bucket for filament change
#####################################################################

[gcode_macro filament_change_on_purge_bucket]
gcode:
 CG28
   G90
   G1 Z 5 F2000 X 220 F8000 Y 358 F8000

#####################################################################
#   Position the tool head on the purge bucket for filament change
#####################################################################

[gcode_macro filament_unload_on_purge_bucket]
gcode:
 CG28
   G90
   G1 Z 5 F2000 X 220 F8000 Y 358 F8000
   filament_unload
   SET_HEATER_TEMPERATURE HEATER=extruder TARGET=160

#####################################################################
#   Center Position on All Axys MACRO
#####################################################################

[gcode_macro CENTER]
gcode:
 CG28
  G90
   G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

#####################################################################
#   Belt Tension Positioning for A,B,Z0,Z1,Z2,Z3 MACRO
#####################################################################

[gcode_macro BELT_TENSION_POSITION]
gcode:
 CG28
  G90
   G1 Z 228.8 F2000 X 175 F8000 Y 117 F8000
    SET_IDLE_TIMEOUT TIMEOUT=99999

#####################################################################
#   Best position for Maintenance & Docking the Extruder MACRO
#####################################################################

[gcode_macro PRESENT_TOOLHEAD]
gcode:
 CG28
  G90
   G1 Z 150 F2000 X 175 F8000 Y 0 F8000

#####################################################################
#   Nozzle Cleaner for PRINT START MACRO
#####################################################################

## Build it Basement youtube channel macro to use your Nozzle Scrubber:
## Source file from: https://www.youtube.com/watch?v=1dbDtm2nSMw
## Edited from: https://github.com/kermyb123/3DPrinting/blob/main/UltiBIB%20Configs/NozzleClean.cfg

[gcode_macro PRINT_START_NOZZLE_CLEAN]
variable_start_x: 189
variable_start_y: 356.9
variable_start_z: 3.2
variable_wipe_dist_y: -1
variable_wipe_qty: 10
variable_wipe_spd: 50
variable_raise_distance: 18

gcode: 
 CG28
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F1500
  
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   #WIPE RIGHT
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   
 {% endfor %}

 ## Raise nozzle after complete
   G1 Z{raise_distance}
   

#####################################################################
#   Nozzle Cleaner MACRO
#####################################################################
[gcode_macro NOZZLE_CLEAN]
variable_start_x: 189
variable_start_y: 356.9
variable_start_z: 3.2
variable_wipe_dist_y: -1
variable_wipe_qty: 10
variable_wipe_spd: 50
variable_raise_distance: 18

gcode:
 CG28
 
 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F1500
  
 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   #WIPE RIGHT
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   
 {% endfor %}

 ## Raise nozzle after complete
 # G1 Z{raise_distance}
 # G1 Y 150
   PRESENT_TOOLHEAD

#####################################################################
#   Purge & Nozzle Clean MACRO
#####################################################################

[gcode_macro PURGE_NOZZLE_CLEAN]
variable_start_x: 189
variable_start_y: 356.9
variable_start_z: 3.2
variable_wipe_dist_y: -1
variable_wipe_qty: 10
variable_wipe_spd: 50
variable_raise_distance: 18
variable_purge_loc_x: 135
variable_purge_loc_y: 357

gcode:
 CG28

 ## Raise nozzle before complete
 G1 Z{raise_distance}
 G1 X{purge_loc_x}
 G1 Y{purge_loc_y}
 M109 S235
 G92 E0
 G1 E30.0 F100
 G92 E0
 G1 E-4.0 F300
 M109 S0

 G90                                            ; absolute positioning
 ## Move nozzle to start position
  G1 X{start_x} Y{start_y} F6000
  G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   #WIPE LEFT
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x + 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   #WIPE RIGHT
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y - wipe_dist_y} F{wipe_spd * 300}
   G1 X{start_x - 17} Y{start_y + wipe_dist_y} F{wipe_spd * 300}
   
 {% endfor %}

 ## Raise nozzle after complete
   G1 Z{raise_distance}
 #  G1 X{purge_loc_x}
 #  G1 Y{purge_loc_y}
 #  M109 S235
 #  G92 E0
 #  G1 E30.0 F100
 #  G92 E0
 #  G1 E-4.0 F300
 #  M109 S0


 #  G1 Z{start_z}
 #  G1 Y{start_y}
 #  G1 X 190 F1000

#####################################################################
#   HEAT SOAK MACROS
#####################################################################

## Heat Soak macros created by: blalor
## Source file from: https://klipper.discourse.group/t/interruptible-heat-soak/1552

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; put the bed and nozzle where they're a safe distance apart
    CG28
    CENTER

    #;; run the PCF fan to circulate air
    M106 S255
    #_SET_FAN_SPEED PERCENT=50

    ;; run the bed fans to circulate air
    BEDFANSSLOW

    # ;; put the bed and nozzle where they're a safe distance apart
    # G28
    # CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

#####################################################################
#   CANCEL HEAT SOAK MACRO
#####################################################################

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}


[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

#####################################################################
#   QUAD BED FANS DUAL CONTROL MACROS
#####################################################################

## Macros created by: AndrewEllis93
## Source file from: https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans

    ############### Config options ##################

[gcode_macro _BEDFANVARS]
variable_threshold: 80		# If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_innerslow: 0.4		# Fan speed while bed is heating
variable_outerslow: 0.4
variable_innerfast: 0.6		# Fan speed once bed temp is reached
variable_outerfast: 0.7 
variable_innermax:  1.0		
variable_outermax:  1.0 
gcode:

########## Bed Fans #########

[fan_generic BedInner]
pin: PD13
cycle_time: 0.05
kick_start_time: 0.5

[fan_generic BedOuter]
pin: PD14
cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BEDFANSSLOW]
gcode:
	# Vars
	{% set INNERSLOW = printer["gcode_macro _BEDFANVARS"].innerslow|float %}
	{% set OUTERSLOW = printer["gcode_macro _BEDFANVARS"].outerslow|float %}
	
	SET_FAN_SPEED FAN=BedInner SPEED={INNERSLOW}
	SET_FAN_SPEED FAN=BedOuter SPEED={OUTERSLOW}

[gcode_macro BEDFANSFAST]
gcode:
	# Vars
	{% set INNERFAST = printer["gcode_macro _BEDFANVARS"].innerfast|float %}
	{% set OUTERFAST = printer["gcode_macro _BEDFANVARS"].outerfast|float %}
	
	SET_FAN_SPEED FAN=BedInner SPEED={INNERFAST}
	SET_FAN_SPEED FAN=BedOuter SPEED={OUTERFAST}

[gcode_macro BEDFANSMAX]
gcode:
	# Vars
	{% set INNERMAX = printer["gcode_macro _BEDFANVARS"].innermax|float %}
	{% set OUTERMAX = printer["gcode_macro _BEDFANVARS"].outermax|float %}
	
	SET_FAN_SPEED FAN=BedInner SPEED={INNERMAX}
	SET_FAN_SPEED FAN=BedOuter SPEED={OUTERMAX}

[gcode_macro BEDFANSOFF]
gcode:
	SET_FAN_SPEED FAN=BedInner SPEED=0
	SET_FAN_SPEED FAN=BedOuter SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
	# Parameters
	{% set HEATER = params.HEATER|default("None") %}
	{% set TARGET = params.TARGET|default(0)|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if HEATER|lower == "extruder" %}
		M104 S{TARGET}
	{% elif HEATER|lower == "heater_bed" %}
		M99140 S{TARGET}
	{% else %}
		{action_respond_info("Heater %s not supported" % HEATER)}
	{% endif %}

	# Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
	{% if HEATER|lower == "heater_bed" %}
		{% if TARGET >= THRESHOLD %}
			BEDFANSSLOW
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
		{% else %}
			BEDFANSOFF
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #	Cancel bed fan loop if it's running
		{% endif %}
	{% endif %}
	
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
rename_existing: M99190
gcode:
	# Parameters
	{% set S = params.S|int %}
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if S >= THRESHOLD %}
		BEDFANSSLOW																# >= Threshold temp: Low speed fans while heating 
	{% else %}
		BEDFANSOFF																# < Threshold temp: Turn bed fans off
	{% endif %}                                        

	M140 {% for p in params
	  %}{'%s%s' % (p, params[p])}{%
	  endfor %}																	# Set bed temp
	  
	{% if S != 0 %}
		TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}	# Wait for bed temp within 5 degrees
	{% endif %}

	# Post-heating fan speeds
	{% if S >= THRESHOLD %}								    
		BEDFANSFAST																# >= Threshold temp: Higher speed fans after heating finished
	{% endif %}
	
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
rename_existing: M99140
gcode:
	# Parameters
	{% set S = params.S|float %}
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
	
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
	BEDFANSOFF
	_TURN_OFF_HEATERS
	
################ Monitoring loop #####################

# Turns bed fans to "fast" speed once target bed temp is reached.
[delayed_gcode bedfanloop]
gcode:
	# Vars
	{% set THRESHOLD = printer["gcode_macro _BEDFANVARS"].threshold|int %}
	
	{% if printer.heater_bed.target >= THRESHOLD %}								# Continue only if target temp greater than threshold.
		{% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 1) %}
			BEDFANSFAST															# If within 1 degree of target temp: Higher speed fans
		{% else %}
			UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5						# If temp not reached yet: loop again
		{% endif %}
	{% endif %}

#####################################################################
#   Conditional Homing MACRO
#####################################################################

[gcode_macro CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

 